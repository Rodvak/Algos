// Singly Linked List
// don't use 'let' or 'const' for algos - for now...
// pointers
// memory locations
// garbage collection
// OOP

// pass by value / copy
var x = 10;
var y = x;

x += 30;
y += 10;

// console.log(x); //?
// console.log(y); //?

// ----------
// pass by reference
var a = [1, 2, 3, 4];
var b = a;

a.push(10);
b.push(20);

// console.log(a); //?
// console.log(b); //?


// Object Literal
var person = {
    name: "Bob",
    favFood: "🍕",
    age: 28
}

// var somePerson = new Person( )

var n1 = {
    value: 11,
    next: null
}

var n2 = {
    value: 22,
    next: null
}

var n3 = {
    value: 33,
    next: null
}


n1.next = n2;
// n2.next = n3
n1.next.next = n3;
// console.log(n1);

// Classes (Car)? blueprints
            // create new Objects // DRY
            // reuse

    // -> constructor
            // (java: member variables)
            // what a class HAS
            // - creates defaults
            // define the object
            // attributes
            // doors

        
    // -> methods - (class functions)
            // what a class can DO - actions
            // drive()
            // honk()
            // seeMilage()

var n4 = {
    value: 45,
    next: null
}

// class for the Node
class Node{
    constructor(value) {
        this.value = value;
        this.next = null
    }
}

var n5 = new Node(99);
// console.log(n5);

var n6 = new Node(100);
// console.log(n6);

n5.next = n6;
console.log(n5);

// class for the SLL
// what will hold all the nodes
class SLL{
    constructor() {
        this.head = null;
    }

    // -- methods --
    isEmpty() {
        if (this.head) {
            return false;
        } else {
            return true;
        }
    }
}

var myCoolSLL = new SLL();
console.log(myCoolSLL);

console.log(myCoolSLL.isEmpty());

class Node {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

class SLL {
    constructor() {
        this.head = null;
    }

    isEmpty() { }

    // when a pointer is to the LEFT of an equal sign, we are CHANGING it
    // when a pointer is to the RIGHT of an equal sign, we are READING it

    // add given node to the head, if it exists. return void
    // list is empty?
    // list already has nodes?
    addToFront(node) {
        node.next = this.head; // set the new node's next to the head
        this.head = node; // move the head to the new node
    }
    // create a new node with given data, add it to the head. return void
    addDataToFront(data) { // 10
        var newNode = new Node(data); // create a new node with the data
        newNode.next = this.head; // set the new node's next to the head
        this.head = newNode; // move the head to the new node
    }
}

// instantiate the SLL
var myCoolSLL = new SLL(); //
console.log(myCoolSLL);
// creating nodes
// var myNode = new Node(55);

// executing methods:
myCoolSLL.addToFront(new Node(55));
myCoolSLL.addToFront(new Node(100));


myCoolSLL.addToFront(new Node(100));
myCoolSLL.addToFront(new Node(44));
myCoolSLL.addToFront(new Node(33));
myCoolSLL.addToFront(new Node(22));
console.log(myCoolSLL);